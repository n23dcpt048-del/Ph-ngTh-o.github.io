<!doctype html>
<html lang="vi">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>Login Form</title>
  <style>
    /* Reset nhẹ */
    * { box-sizing: border-box; margin: 0; padding: 0; }

    body {
      font-family: Inter, system-ui, "Segoe UI", Roboto, "Helvetica Neue", Arial;
      background: linear-gradient(135deg, #f0f4ff 0%, #e6fbf5 100%);
      min-height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
      padding: 24px;
    }

    .card {
      width: 100%;
      max-width: 420px;
      background: #fff;
      border-radius: 12px;
      box-shadow: 0 10px 30px rgba(16, 24, 40, 0.08);
      padding: 28px;
      border: 1px solid rgba(16,24,40,0.04);
    }

    h2 {
      font-size: 20px;
      margin-bottom: 12px;
      color: #0f172a;
    }

    p.sub {
      color: #475569;
      font-size: 13px;
      margin-bottom: 20px;
    }

    .form-row {
      margin-bottom: 14px;
    }

    label {
      display: block;
      font-size: 13px;
      margin-bottom: 6px;
      color: #334155;
    }

    input[type="text"],
    input[type="password"] {
      width: 100%;
      padding: 10px 12px;
      border-radius: 8px;
      border: 1px solid rgba(15,23,42,0.08);
      font-size: 14px;
      outline: none;
      transition: box-shadow .12s, border-color .12s;
      background: #fbfdff;
    }

    input[type="text"]:focus,
    input[type="password"]:focus {
      border-color: #7c3aed;
      box-shadow: 0 0 0 4px rgba(124,58,237,0.06);
    }

    .row-between {
      display: flex;
      align-items: center;
      justify-content: space-between;
    }

    .remember {
      display: flex;
      align-items: center;
      gap: 8px;
      font-size: 14px;
      color: #334155;
    }

    .actions {
      display: flex;
      gap: 10px;
      margin-top: 18px;
    }

    button {
      cursor: pointer;
      padding: 10px 14px;
      border-radius: 8px;
      font-weight: 600;
      font-size: 14px;
      border: none;
    }

    button#loginBtn {
      background: linear-gradient(90deg,#5b21b6,#7c3aed);
      color: #fff;
      flex: 1;
      box-shadow: 0 6px 18px rgba(124,58,237,0.18);
    }

    button#cancelBtn {
      background: #f1f5f9;
      color: #0f172a;
      border: 1px solid rgba(15,23,42,0.04);
      padding: 10px 12px;
      border-radius: 8px;
      flex-basis: 110px;
    }

    .error {
      margin-top: 6px;
      font-size: 13px;
      color: #b91c1c;
    }

    .small {
      font-size: 13px;
      color: #475569;
    }

    /* Responsive nhỏ */
    @media (max-width: 420px) {
      .card { padding: 18px; }
      .actions { flex-direction: column-reverse; }
      button#cancelBtn { width: 100%; flex-basis: auto; }
    }
  </style>
</head>
<body>
  <main class="card" aria-labelledby="loginTitle">
    <h2 id="loginTitle">Đăng nhập</h2>
    <p class="sub">Đăng nhập để tiếp tục. Vui lòng nhập tài khoản và mật khẩu.</p>

    <form id="loginForm" novalidate>
      <div class="form-row">
        <label for="username">Username</label>
        <input id="username" name="username" type="text" autocomplete="username" placeholder="Nhập username" required />
        <div id="userError" class="error" role="alert" aria-live="polite" style="display:none"></div>
      </div>

      <div class="form-row">
        <label for="password">Password</label>
        <input id="password" name="password" type="password" autocomplete="current-password" placeholder="Nhập mật khẩu" required />
        <div id="passError" class="error" role="alert" aria-live="polite" style="display:none"></div>
      </div>

      <div class="form-row row-between">
        <label class="remember">
          <input id="remember" name="remember" type="checkbox" />
          <span>Remember me</span>
        </label>
        <button type="button" id="showPass" aria-pressed="false" class="small" style="background:none;border:none;color:#2563eb;padding:6px;font-weight:600;">Hiện mật khẩu</button>
      </div>

      <div class="actions">
        <button type="submit" id="loginBtn">Login</button>
        <button type="button" id="cancelBtn">Cancel</button>
      </div>

      <div id="formMessage" class="error" role="status" aria-live="polite" style="display:none; margin-top:12px"></div>
    </form>
  </main>

  <script>
    // Element references
    const form = document.getElementById('loginForm');
    const username = document.getElementById('username');
    const password = document.getElementById('password');
    const remember = document.getElementById('remember');
    const userError = document.getElementById('userError');
    const passError = document.getElementById('passError');
    const formMessage = document.getElementById('formMessage');
    const cancelBtn = document.getElementById('cancelBtn');
    const showPassBtn = document.getElementById('showPass');

    // Basic validation rules
    function validateUsername(value) {
      value = value.trim();
      if (!value) return "Username không được để trống.";
      if (value.length < 3) return "Username phải có ít nhất 3 ký tự.";
      if (value.length > 30) return "Username tối đa 30 ký tự.";
      // Hạn chế ký tự lạ (ví dụ chỉ cho phép chữ, số, gạch dưới, chấm)
      if (!/^[\w.]+$/.test(value)) return "Username chỉ được chứa chữ, số, gạch dưới (_) hoặc dấu chấm (.).";
      return "";
    }

    function validatePassword(value) {
      if (!value) return "Password không được để trống.";
      if (value.length < 6) return "Password phải có ít nhất 6 ký tự.";
      return "";
    }

    // Show error helper
    function showError(el, msg) {
      if (msg) {
        el.textContent = msg;
        el.style.display = "block";
      } else {
        el.textContent = "";
        el.style.display = "none";
      }
    }

    // Handle form submit
    form.addEventListener('submit', function (ev) {
      ev.preventDefault(); // chặn submit mặc định

      // reset messages
      showError(userError, "");
      showError(passError, "");
      formMessage.style.display = "none";
      formMessage.textContent = "";

      const u = username.value;
      const p = password.value;
      const rememberChecked = remember.checked;

      // validate
      const userErr = validateUsername(u);
      const passErr = validatePassword(p);

      let hasError = false;
      if (userErr) { showError(userError, userErr); hasError = true; }
      if (passErr) { showError(passError, passErr); hasError = true; }

      if (hasError) {
        formMessage.textContent = "Có lỗi trong form. Vui lòng sửa rồi thử lại.";
        formMessage.style.display = "block";
        return;
      }

      // Nếu muốn mô phỏng "login success" (ở đây chỉ demo, không có server)
      // Thực tế: gửi request đến server bằng fetch/AJAX và xử lý token...
      // Ở demo này ta lưu username nếu chọn remember
      if (rememberChecked) {
        try {
          localStorage.setItem('rememberedUsername', u);
        } catch (e) {
          // storage có thể bị chặn trong một số môi trường
          console.warn('Cannot access localStorage:', e);
        }
      } else {
        localStorage.removeItem('rememberedUsername');
      }

      // Hiển thị thông báo thành công (demo)
      formMessage.style.color = '#065f46'; // màu xanh cho success
      formMessage.textContent = 'Đăng nhập thành công (demo). Username: ' + u;
      formMessage.style.display = "block";

      // Nếu bạn muốn chuyển page hoặc thực hiện request, làm tại đây.
      // Ví dụ: window.location.href = '/dashboard';
    });

    // Cancel: xóa form
    cancelBtn.addEventListener('click', function () {
      form.reset();
      showError(userError, "");
      showError(passError, "");
      formMessage.style.display = "none";
      // Nếu có stored remembered username, giữ nguyên (tuỳ bạn muốn)
      // localStorage.removeItem('rememberedUsername');
    });

    // Toggle show/hide password
    showPassBtn.addEventListener('click', function () {
      const isShown = password.type === 'text';
      password.type = isShown ? 'password' : 'text';
      showPassBtn.textContent = isShown ? 'Hiện mật khẩu' : 'Ẩn mật khẩu';
      showPassBtn.setAttribute('aria-pressed', String(!isShown));
    });

    // Try to prefill username if remembered
    window.addEventListener('DOMContentLoaded', () => {
      try {
        const saved = localStorage.getItem('rememberedUsername');
        if (saved) {
          username.value = saved;
          remember.checked = true;
        }
      } catch (e) { /* ignore */ }
    });

    // Optional: live validation as user types
    username.addEventListener('input', () => showError(userError, validateUsername(username.value)));
    password.addEventListener('input', () => showError(passError, validatePassword(password.value)));
  </script>
</body>
</html>
